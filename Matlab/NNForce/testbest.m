
clc;
clear;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%% Get data and process %%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %import testdata
    sizedata = size(csvread('testdata.csv',1,0));
    rawdata = csvread('testdata.csv',1,0,[1,0,sizedata(1),5]);
    %randomise row order to limit the risk of local minima
    data = rawdata(randperm(size(rawdata, 1)), :);
    %force,orientation,raw1,raw2,raw3,raw4

    %Create training vectors
    raw1 = data(:,3)/1000; %Raw bits from sensor 1
    raw2 = data(:,4)/1000; %Raw bits from sensor 2
    raw3 = data(:,5)/1000; %Raw bits from sensor 3
    raw4 = data(:,6)/1000; %Raw bits from sensor 4

    %Create answer vectors
    Fx = (data(:,1).*cos((deg2rad(data(:,2)))));
    
    %Process data to remove any tiny numbers (such as xE-17)caused by trig
    c=0;
    for count = 1:sizedata(1)
        c=c+1;
        if Fx(c) <0.01 && Fx(c) > -0.01
            Fx(c) = 0;
        end
    end
    
    %Scale to work nicely with NN maths
    Fx = Fx/100;
    
    Fy = (data(:,1).*sin((deg2rad(data(:,2)))));
    
    %Process data to remove any tiny numbers (such as xE-17)caused by trig
    c=0;
    for count = 1:sizedata(1)
        c=c+1;
        if Fy(c) <0.01 && Fy(c) > -0.01
            Fy(c) = 0;
        end
    end
    
    %Scale to work nicely with NN maths
    Fy = Fy/100;
    


% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 30-Apr-2019 15:15:31
%
% This script assumes these variables are defined:
%
%   simplefitInputs - input data.
%   simplefitTargets - target data.

x = [raw1'
      raw2'    
      raw3'  
      raw4'];
t = [Fx'
      Fy'];

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = [20,10];
net = fitnet(hiddenLayerSize,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {};
net.output.processFcns = {};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

%Set a training goal
net.trainParam.goal= 1e-6;
net.trainParam.epochs=15000;

net.layers{1}.transferFcn = 'tansig';
net.layers{2}.transferFcn = 'tansig';
net.layers{3}.transferFcn = 'tansig';

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x);
end
if (true)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end
